{"version":3,"sources":["Components/Dashboard/Dashboard.js","Components/Navbar/Navbar.js","Components/Form/AddForm.js","Action/FormActions.js","App.js","reportWebVitals.js","Reducers/RootReducer.js","index.js"],"names":["Dashboard","slotIdArray","savedData","localStorage","getItem","JSON","parse","map","item","index","slotId","setItem","stringify","timeSlotList","time","timeslot","className","includes","to","Component","withRouter","props","AddForm","state","firstName","lastName","phoneNumber","errors","touched","handleValidation","formIsValid","match","setState","handlechange","e","target","id","value","handleBlur","handlesubmit","preventDefault","data","forUpdate","updateTimeSlot","addTimeSlot","history","push","console","error","redirectHome","getOccupiedData","occupiedSlots","this","occupiedSlotData","filter","onSubmit","autoComplete","htmlFor","type","onChange","onBlur","onClick","connect","ownProps","params","dispatch","App","exact","path","component","dashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducer","action","toast","success","forEach","element","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.951345cc.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Dashboard extends Component {\n    render() {\n        const timeSlot = [\n            { slotId: 1, time: '9 am - 10 am' },\n            { slotId: 2, time: '10 am - 11 am' },\n            { slotId: 3, time: '11 am - 12 pm' },\n            { slotId: 4, time: '12 pm - 1 pm' },\n            { slotId: 5, time: '1 pm - 2 pm' },\n            { slotId: 6, time: '2 pm - 3 pm' },\n            { slotId: 7, time: '3 pm - 4 pm' },\n            { slotId: 8, time: '4 pm - 5 pm' },\n            { slotId: 9, time: '5 pm - 6 pm' },\n        ];\n        let savedData = localStorage.getItem(\"timeSlotData\");\n        let slotIdArray;\n        if (savedData) {\n            savedData = JSON.parse(savedData);\n            slotIdArray = savedData.map((item, index) => {\n                return item.slotId;\n            });\n            localStorage.setItem(\"occupiedSlots\", JSON.stringify(slotIdArray));\n        }\n        const timeSlotList = timeSlot.map(timeslot => {\n            return (\n                <div className={\"post card \" + (slotIdArray && slotIdArray.includes(JSON.stringify(timeslot.slotId)) ? \"red\" : \"\")} key={timeslot.slotId}>\n                    <div className=\"card-content\">\n                        <Link to={'/' + timeslot.slotId}>\n                            <span className=\"card-title black-text\">\n                                {timeslot.time}\n                            </span>\n                        </Link>\n                    </div>\n                </div>\n            )\n        })\n        return (\n            <div>\n                <div className=\"container home\">\n                    {timeSlotList}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = (props) => {\n    return (\n        <div className=\"navbar-fixed\">\n            <nav className=\"teal\">\n                <div className=\"nav-wrapper\">\n                    <Link to=\"/\" className=\"brand-logo center\">\n                        TimeSlot\n                    </Link>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default withRouter(Navbar);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { addTimeSlot } from '../../Action/FormActions';\nimport { updateTimeSlot } from '../../Action/FormActions';\n\nclass AddForm extends Component {\n    constructor(props) {\n        super();\n        this.forUpdate = false;\n    }\n\n    state = {\n        firstName: '',\n        lastName: '',\n        phoneNumber: '',\n        errors: {},\n        touched: {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n        },\n    }\n\n    componentDidMount() {\n        let occupiedSlots = localStorage.getItem(\"occupiedSlots\");\n        let getOccupiedData;\n        if (occupiedSlots) {\n            occupiedSlots = JSON.parse(occupiedSlots);\n            if (occupiedSlots.includes(this.props.slotId)) {\n                this.forUpdate = true;\n                let occupiedSlotData = localStorage.getItem('timeSlotData');\n                occupiedSlotData = JSON.parse(occupiedSlotData);\n                getOccupiedData = occupiedSlotData.filter((item, index) => {\n                    return item.slotId === this.props.slotId;\n                })\n                this.setState({\n                    firstName: getOccupiedData[0].firstName,\n                    lastName: getOccupiedData[0].lastName,\n                    phoneNumber: getOccupiedData[0].phoneNumber,\n                })\n            }\n        }\n    }\n\n    handleValidation = () => {\n        let { firstName, lastName, phoneNumber } = this.state;\n        let errors = {};\n        let formIsValid = true;\n        if (!firstName) {\n            formIsValid = false;\n            errors[\"firstName\"] = \"Cannot be empty!\";\n        }\n        if (firstName && typeof firstName !== \"undefined\") {\n            if (!firstName.match(/^[a-zA-Z]+$/)) { // regex for only alphabets\n                formIsValid = false;\n                errors[\"firstName\"] = \"Firstname should have only letters without space.\";\n            }\n        }\n        if (!lastName) {\n            formIsValid = false;\n            errors[\"lastName\"] = \"Cannot be empty!\";\n        }\n        if (lastName && typeof lastName !== \"undefined\") {\n            if (!lastName.match(/^[a-zA-Z]+$/)) { // regex for only alphabets\n                formIsValid = false;\n                errors[\"lastName\"] = \"Lastname should have only letters without space.\";\n            }\n        }\n        if (!phoneNumber) {\n            formIsValid = false;\n            errors[\"phoneNumber\"] = \"Cannot be empty!\";\n        }\n        if (phoneNumber && typeof phoneNumber !== \"undefined\") {\n            if (!phoneNumber.match(/^[0-9]{10}$/)) { // regex for only numbers\n                formIsValid = false;\n                errors[\"phoneNumber\"] = \"Enter valid mobile number.\";\n            }\n        }\n        this.setState({\n            errors: errors\n        });\n        return formIsValid;\n    }\n\n    handlechange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value,\n        });\n        this.handleValidation();\n    }\n\n    handleBlur = (e) => {\n        let { touched } = this.state;\n        if (e.target.id && touched[e.target.id] != true) {\n            touched[e.target.id] = true;\n            this.setState({\n                touched\n            });\n        }\n        this.handleValidation();\n    }\n\n    handlesubmit = (e) => {\n        e.preventDefault();\n        if (this.handleValidation()) {\n            const data = {\n                firstName: this.state.firstName,\n                lastName: this.state.lastName,\n                phoneNumber: this.state.phoneNumber,\n                slotId: this.props.slotId,\n            }\n            if (this.forUpdate) {\n                this.props.updateTimeSlot(data);\n            } else {\n                this.props.addTimeSlot(data);\n            }\n            this.setState({\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n            });\n            this.props.history.push(\"/\");\n        } else {\n            console.error('error');\n        }\n    }\n\n    redirectHome = (e) => {\n        e.preventDefault();\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n        return (\n            <div>\n                <form id=\"addSlotForm\" onSubmit={this.handlesubmit} className=\"container form-add\" autoComplete=\"off\">\n                    <legend><h4>Fill the below details</h4></legend>\n                    <div className=\"form-group\">\n                        <div>\n                            <label htmlFor=\"firstName\" className=\"form-label\">First Name</label>\n                            <input type=\"text\" className=\"form-control\" id=\"firstName\" value={this.state.firstName} onChange={this.handlechange} onBlur={this.handleBlur} />\n                            <span className=\"add-form-error\">\n                                {this.state.touched.firstName && this.state.errors.firstName}\n                            </span>\n                        </div>\n                        <div>\n                            <label htmlFor=\"lastName\" className=\"form-label\">Last Name</label>\n                            <input type=\"text\" className=\"form-control\" id=\"lastName\" value={this.state.lastName} onChange={this.handlechange} onBlur={this.handleBlur} />\n                            <span className=\"add-form-error\">\n                                {this.state.touched.lastName && this.state.errors.lastName}\n                            </span>\n                        </div>\n                        <div>\n                            <label htmlFor=\"phoneNumber\" className=\"form-label\">Phone Number</label>\n                            <input type=\"text\" className=\"form-control\" id=\"phoneNumber\" value={this.state.phoneNumber} onChange={this.handlechange} onBlur={this.handleBlur} />\n                            <span className=\"add-form-error\">\n                                {this.state.touched.phoneNumber && this.state.errors.phoneNumber}\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"btn-block\">\n                        {this.forUpdate ? <button type=\"submit\" className=\"btn btn-primary\">Update</button> : <button type=\"submit\" className=\"btn btn-primary\">Save</button>}\n                        <button className=\"btn btn-danger\" onClick={this.redirectHome}>Cancel</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const id = ownProps.match.params.slotId;\n    return {\n        slotId: id\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTimeSlot: (data) => dispatch(addTimeSlot(data)),\n        updateTimeSlot: (data) => dispatch(updateTimeSlot(data)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm);\n","export const addTimeSlot = (data) => {\n    return {\n        type: 'ADD_TIMESLOT',\n        data,\n    }\n}\n\nexport const updateTimeSlot = (data) => {\n    return {\n        type: 'UPDATE_TIMESLOT',\n        data,\n    }\n}\n","import './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport dashboard from './Components/Dashboard/Dashboard';\nimport Navbar from './Components/Navbar/Navbar';\nimport AddForm from './Components/Form/AddForm';\nimport { ToastContainer } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <ToastContainer />\n      <div>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={dashboard} />\n          <Route path=\"/:slotId\" component={AddForm} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { toast } from \"react-toastify\";\n\nconst RootReducer = (state = {}, action) => {\n    let savedData = localStorage.getItem('timeSlotData');\n    savedData = JSON.parse(savedData);\n    if (action.type == 'ADD_TIMESLOT') {\n        if (savedData && typeof savedData == 'object') {\n            savedData.push(action.data)\n            localStorage.setItem('timeSlotData', JSON.stringify(savedData));\n        } else {\n            localStorage.setItem('timeSlotData', JSON.stringify([action.data]));\n        }\n        toast.success('Added a task in timeslot');\n    }\n    if (action.type == 'UPDATE_TIMESLOT') {\n        if (savedData) {\n            savedData.forEach((element, index) => {\n                if (element.slotId === action.data.slotId) {\n                    savedData[index].firstName = action.data.firstName;\n                    savedData[index].lastName = action.data.lastName;\n                    savedData[index].phoneNumber = action.data.phoneNumber;\n                }\n            });\n            localStorage.setItem('timeSlotData', JSON.stringify(savedData));\n        }\n        toast.success('Updated a task in timeslot');\n    }\n    return state;\n}\n\nexport default RootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport RootReducer from './Reducers/RootReducer';\n\nconst store = createStore(RootReducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}